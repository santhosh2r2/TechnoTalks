---

import { projects } from "./projects"

// Generate a random light color in RGB format
function randomLightColor() {
    const r = Math.floor(Math.random() * 128) + 128; // Values between 128-255
    const g = Math.floor(Math.random() * 128) + 128;
    const b = Math.floor(Math.random() * 128) + 128;
    return `rgb(${r}, ${g}, ${b})`;
}

// Function to darken an RGB color
function generateDarkColorForLight(lightColor) {
    // Extract RGB values from the light color (e.g., "rgb(200, 180, 250)")
    const rgbValues = lightColor.match(/\d+/g).map(Number);

    // Reduce each RGB channel to create a darker shade
    const darkValues = rgbValues.map(value => Math.floor(value * 0.5)); // 50% brightness
    return `rgb(${darkValues.join(", ")})`;
}

function getColors(){

    const lightColor = randomLightColor();
    const darkColor = generateDarkColorForLight(lightColor);

    return `background-color:${lightColor}; color:${darkColor}`
}
---

<div>
{
    projects.map(({title, link}) => (
    <a 
        style={getColors()}
        href={link}
        {title}
        >
        <span>{title[0]}</span> 
    </a>
    ))
}
</div>


<style>
    div{
        width: 100%;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: flex-start;
    }
    a{
        appearance: none;
        text-decoration: none;
        border: none;
        outline: 1px solid rgba(255, 255, 255, 0.08);
        outline-offset: -1px;
        padding: 8px 30px;
        font-size: 2rem;
        border-radius: .3125rem;
        cursor: pointer;
        margin: 4px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    a:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px var(--color-card-hover-shadow);
    }
</style>